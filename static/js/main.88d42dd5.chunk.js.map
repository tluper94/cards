{"version":3,"sources":["components/Card.js","components/Deck.js","components/Slot.js","components/CardSlots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","img","id","className","alt","src","gsap","registerPlugin","Draggable","Deck","cards","useEffect","create","bounds","edgeResistance","type","map","card","i","console","log","code","key","image","Slot","deck","draw","onClick","CardSlots","App","state","drawCards","bind","getDeck","getRemainingCards","fetch","resp","json","data","this","setState","deck_id","moreCards","newDeck","concat","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8WAYeA,MATf,YAA4B,IAAZC,EAAW,EAAXA,IAAKC,EAAM,EAANA,GACnB,OACE,yBAAKA,GAAIA,EAAIC,UAAU,QACrB,6BACE,yBAAKC,IAAKF,EAAIG,IAAKJ,O,uBCD3BK,IAAKC,eAAeC,KAsBLC,MApBf,YAA0B,IAAVC,EAAS,EAATA,MASd,OARAC,qBAAU,WACRH,IAAUI,OAAO,QAAS,CACxBC,OAAQ,QACRC,eAAgB,IAChBC,KAAM,WAKR,yBAAKZ,UAAU,QACZO,EAAMM,KAAI,SAACC,EAAMC,GAEhB,OADAC,QAAQC,IAAIV,EAAMQ,GAAGG,MAEnB,kBAAC,EAAD,CAAMC,IAAKZ,EAAMQ,GAAGG,KAAMpB,IAAKS,EAAMQ,GAAGK,MAAOrB,GAAIQ,EAAMQ,GAAGG,Y,YCOvDG,MA1Bf,YAA+B,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACpB,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,OAAd,MAEF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,OAAd,MAEF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,OAAd,MAEF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,OAAd,MAEF,yBAAKA,UAAU,OACb,4BAAQwB,QAASF,EAAMtB,UAAU,cAAjC,YAGA,4BAAQwB,QAASD,EAAMvB,UAAU,cAAjC,W,MCNOyB,MAbf,WACE,OACE,yBAAKzB,UAAU,aACb,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WCwDN0B,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACX5B,GAAI,GACJQ,MAAO,GACPe,KAAM,GACNC,KAAM,IAER,EAAKK,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAVb,E,wLAcOG,MACjB,iE,cADIC,E,gBAGaA,EAAKC,O,OAAlBC,E,OACNC,KAAKC,SAAS,CAAEtC,GAAIoC,EAAKG,UACzBF,KAAKR,Y,0QAIcI,MAAM,uCAAD,OACiBI,KAAKT,MAAM5B,GAD5B,mB,cAAlBkC,E,gBAGaA,EAAKC,O,OAAlBC,E,OACNC,KAAKC,SAAS,CAAEf,KAAMa,IACtBC,KAAKC,SAAS,CAAE9B,MAAO4B,EAAK5B,Q,wRAITyB,MAAM,uCAAD,OACiBI,KAAKT,MAAM5B,GAD5B,mB,cAAlBkC,E,gBAGaA,EAAKC,O,OAAlBC,E,OACF5B,EAAQ6B,KAAKT,MAAMpB,MACnBgC,EAAYJ,EAAK5B,MACjBiC,EAAUjC,EAAMkC,OAAOF,GAC3BH,KAAKC,SAAS,CAAE9B,MAAOiC,I,iJAIvBJ,KAAKN,Y,+BAGG,IACAvB,EAAU6B,KAAKT,MAAfpB,MACR,OAAQA,EAAMmC,OAGZ,6BACE,kBAAC,EAAD,CAAMpB,KAAMc,KAAKN,QAASP,KAAMa,KAAKL,oBACrC,yBAAK/B,UAAU,aACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAMO,MAAOA,KAPf,iE,GAlDYoC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.88d42dd5.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Card.css';\r\n\r\nfunction Card({ img, id }) {\r\n  return (\r\n    <div id={id} className='card'>\r\n      <div>\r\n        <img alt={id} src={img}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","import React, { useEffect } from 'react';\r\nimport Card from './Card';\r\nimport '../css/Deck.css';\r\nimport { gsap } from 'gsap';\r\nimport { Draggable } from 'gsap/Draggable';\r\n\r\ngsap.registerPlugin(Draggable);\r\n\r\nfunction Deck({ cards }) {\r\n  useEffect(() => {\r\n    Draggable.create('.card', {\r\n      bounds: '#root',\r\n      edgeResistance: 0.65,\r\n      type: 'x,y',\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div className='deck'>\r\n      {cards.map((card, i) => {\r\n        console.log(cards[i].code);\r\n        return (\r\n          <Card key={cards[i].code} img={cards[i].image} id={cards[i].code} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\nexport default Deck;\r\n","import React from 'react';\r\nimport '../css/slot.css';\r\n\r\nfunction Slot({ deck, draw }) {\r\n  return (\r\n    <div className='container'>\r\n      <div className='slot'>\r\n        <h1 className='ace'>A</h1>\r\n      </div>\r\n      <div className='slot'>\r\n        <h1 className='ace'>A</h1>\r\n      </div>\r\n      <div className='slot'>\r\n        <h1 className='ace'>A</h1>\r\n      </div>\r\n      <div className='slot'>\r\n        <h1 className='ace'>A</h1>\r\n      </div>\r\n      <div className='btn'>\r\n        <button onClick={deck} className='shufflebtn'>\r\n          New Game\r\n        </button>\r\n        <button onClick={draw} className='shufflebtn'>\r\n          Draw\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Slot;\r\n","import React from 'react';\r\nimport '../css/CardSlots.css';\r\n\r\nfunction CardSlots() {\r\n  return (\r\n    <div className='container'>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n      <div className='slot'></div>\r\n    </div>\r\n  );\r\n}\r\nexport default CardSlots;\r\n","import React, { Component } from 'react';\r\nimport Deck from '../components/Deck';\r\nimport '../css/App.css';\r\nimport Slot from '../components/Slot';\r\nimport CardSlots from '../components/CardSlots';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: [],\r\n      cards: [],\r\n      deck: [],\r\n      draw: [],\r\n    };\r\n    this.drawCards = this.drawCards.bind(this);\r\n    this.getDeck = this.getDeck.bind(this);\r\n    this.getRemainingCards = this.getRemainingCards.bind(this);\r\n  }\r\n\r\n  async getDeck() {\r\n    const resp = await fetch(\r\n      'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    );\r\n    const data = await resp.json();\r\n    this.setState({ id: data.deck_id });\r\n    this.drawCards();\r\n  }\r\n\r\n  async drawCards() {\r\n    const resp = await fetch(\r\n      `https://deckofcardsapi.com/api/deck/${this.state.id}/draw/?count=4`\r\n    );\r\n    const data = await resp.json();\r\n    this.setState({ deck: data });\r\n    this.setState({ cards: data.cards });\r\n  }\r\n\r\n  async getRemainingCards() {\r\n    const resp = await fetch(\r\n      `https://deckofcardsapi.com/api/deck/${this.state.id}/draw/?count=4`\r\n    );\r\n    const data = await resp.json();\r\n    let cards = this.state.cards;\r\n    let moreCards = data.cards;\r\n    let newDeck = cards.concat(moreCards);\r\n    this.setState({ cards: newDeck });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDeck();\r\n  }\r\n\r\n  render() {\r\n    const { cards } = this.state;\r\n    return !cards.length ? (\r\n      <h1>Loading Please Wait..........</h1>\r\n    ) : (\r\n      <div>\r\n        <Slot deck={this.getDeck} draw={this.getRemainingCards} />\r\n        <div className='cardslots'>\r\n          <CardSlots />\r\n        </div>\r\n        <Deck cards={cards} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}