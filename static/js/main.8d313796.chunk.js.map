{"version":3,"sources":["components/Card.js","components/Deck.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","img","id","className","alt","src","Deck","cards","map","card","i","key","code","image","App","state","deck","shuffle","draw","shuffleCards","bind","drawCards","getDeck","fetch","resp","json","data","this","setState","deck_id","console","log","length","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAYeA,MATf,YAA4B,IAAZC,EAAW,EAAXA,IAAKC,EAAM,EAANA,GACnB,OACE,6BACE,yBAAKC,UAAU,YACb,yBAAKC,IAAKF,EAAIG,IAAKJ,O,MCQZK,MAXf,YAA0B,IAAVC,EAAS,EAATA,MACd,OACE,yBAAKJ,UAAU,kDACZI,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CAAMC,IAAKJ,EAAMG,GAAGE,KAAMX,IAAKM,EAAMG,GAAGG,MAAOX,GAAIK,EAAMG,GAAGR,UCgEvDY,G,wDApEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,GACNC,QAAS,GACTC,KAAM,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBATH,E,wLAaOG,MACjB,iE,cADIC,E,gBAGaA,EAAKC,O,OAAlBC,E,OACNC,KAAKC,SAAS,CAAEZ,KAAMU,EAAKG,UAC3BF,KAAKN,Y,0QAIcE,MAAM,uCAAD,OACiBI,KAAKZ,MAAMC,KAD5B,oB,cAAlBQ,E,gBAGaA,EAAKC,O,OAAlBC,E,OACNC,KAAKC,SAAS,CAAEV,KAAMQ,EAAKnB,Q,sRAKNgB,MAAM,uCAAD,OACiBI,KAAKZ,MAAMC,KAD5B,c,cAAlBQ,E,gBAGaA,EAAKC,O,OAAlBC,E,OACNC,KAAKC,SAAS,CAAEX,QAASS,IACzBC,KAAKN,Y,kDAELS,QAAQC,IAAR,KAAiB,8B,0JAKnBJ,KAAKL,Y,+BAKL,OADiBK,KAAKZ,MAAdG,KACKc,OAGX,6BACE,yBAAK7B,UAAU,OACb,4BAAQ8B,QAASN,KAAKL,QAASnB,UAAU,cAAzC,QAGA,4BAAQA,UAAU,aAAa8B,QAASN,KAAKR,cAA7C,YAIF,yBAAKhB,UAAU,OACb,wBAAIA,UAAU,OAAd,YAA8BwB,KAAKZ,MAAMC,OAE3C,kBAAC,EAAD,CAAMT,MAAOoB,KAAKZ,MAAMG,QAd1B,iE,GAlDYgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.8d313796.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Card.css';\r\n\r\nfunction Card({ img, id }) {\r\n  return (\r\n    <div>\r\n      <div className='moveable'>\r\n        <img alt={id} src={img}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport '../css/Deck.css';\r\n\r\nfunction Deck({ cards }) {\r\n  return (\r\n    <div className='flex flex-wrap ma2 justify-center items-center'>\r\n      {cards.map((card, i) => {\r\n        return (\r\n          <Card key={cards[i].code} img={cards[i].image} id={cards[i].id} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\nexport default Deck;\r\n","import React, { Component } from 'react';\r\nimport Deck from '../components/Deck';\r\nimport '../css/App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      deck: [],\r\n      shuffle: [],\r\n      draw: [],\r\n    };\r\n    this.shuffleCards = this.shuffleCards.bind(this);\r\n    this.drawCards = this.drawCards.bind(this);\r\n    this.getDeck = this.getDeck.bind(this);\r\n  }\r\n\r\n  async getDeck() {\r\n    const resp = await fetch(\r\n      'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\r\n    );\r\n    const data = await resp.json();\r\n    this.setState({ deck: data.deck_id });\r\n    this.drawCards();\r\n  }\r\n\r\n  async drawCards() {\r\n    const resp = await fetch(\r\n      `https://deckofcardsapi.com/api/deck/${this.state.deck}/draw/?count=52`\r\n    );\r\n    const data = await resp.json();\r\n    this.setState({ draw: data.cards });\r\n  }\r\n\r\n  async shuffleCards() {\r\n    try {\r\n      const resp = await fetch(\r\n        `https://deckofcardsapi.com/api/deck/${this.state.deck}/shuffle/`\r\n      );\r\n      const data = await resp.json();\r\n      this.setState({ shuffle: data });\r\n      this.drawCards();\r\n    } catch (err) {\r\n      console.log(err, 'Oppps something went wrong');\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDeck();\r\n  }\r\n\r\n  render() {\r\n    const { draw } = this.state;\r\n    return !draw.length ? (\r\n      <h1>Loading Please Wait..........</h1>\r\n    ) : (\r\n      <div>\r\n        <div className='btn'>\r\n          <button onClick={this.getDeck} className='shufflebtn'>\r\n            Draw\r\n          </button>\r\n          <button className='shufflebtn' onClick={this.shuffleCards}>\r\n            Shuffle\r\n          </button>\r\n        </div>\r\n        <div className='btn'>\r\n          <h1 className='txt'>Deck ID: {this.state.deck}</h1>\r\n        </div>\r\n        <Deck cards={this.state.draw} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}